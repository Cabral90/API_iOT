openapi: 3.0.0
info:
  title: iOT ChirpStack
  description: >-
    OpenApi3 iOT ChirpStack Server, user data management and interaction API and
    integrated device humidity and temperature sensor.
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: devext3@gantabi.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'https://localhost:8080/v1'
  - url: 'http://localhost:8080/v1'
tags:
  - name: iOT Company
    description: Crud company
    externalDocs:
      description: Company registration and maintenance
      url: 'http://swagger.io'
  - name: iOT User
    description: User registration and maintenance
  - name: iOT Device
    description: Operations about User
    externalDocs:
      description: Find out more about our Device
      url: 'http://swagger.io'
paths:
  /companies:
    post:
      tags:
        - company
      summary: Create a new Company
      operationId: createCompany
      requestBody:
        description: Company object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompany'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
      x-codegen-request-body-name: body
    put:
      tags:
        - company
      summary: Update an existing Company
      operationId: updateCompany
      parameters:
        - $ref: '#/components/parameters/companyIdQuery'
      requestBody:
        description: Comapny object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCompany'
        required: true
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Company not found
          content: {}
        '405':
          description: Validation exception
          content: {}
      x-codegen-request-body-name: body
    get:
      tags:
        - company
      summary: Get all Companies
      description: Returns all Company
      operationId: getAllCompany
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyList'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Company not found
          content: {}
    delete:
      tags:
        - company
      summary: Deletes a Company
      operationId: deleteCompany
      parameters:
        - $ref: '#/components/parameters/companyIdQuery'
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Company not found
          content: {}
  '/companies/{companyId}':
    get:
      tags:
        - company
      summary: Find Company by ID
      description: Returns a single Company
      operationId: getCompanyById
      parameters:
        - $ref: '#/components/parameters/companyIdPath'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Company not found
          content: {}
  /users:
    post:
      tags:
        - user
      summary: Create a new User
      operationId: createUser
      requestBody:
        description: User object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
        required: true
        x-codegen-request-body-name: body
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      tags:
        - user
      summary: Update an existing User
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/userIdQuery'
      requestBody:
        description: User object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: User not found
          content: {}
        '405':
          description: Validation exception
          content: {}
      x-codegen-request-body-name: body
    get:
      tags:
        - user
      summary: Get all Useres
      description: Returns list for User
      operationId: getAllUser
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/filter'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUser'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: User not found
          content: {}
    delete:
      tags:
        - user
      summary: Deletes a User
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/userIdQuery'
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: User not found
          content: {}

  '/users/{userId}':
    get:
      tags:
        - user
      summary: Get User by ID
      description: Returns a single User
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/userIdPath'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUser'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: User not found
          content: {}

  /passwords:
    put:
      tags:
        - password
      summary: Update Password
      operationId: updatePassword
      parameters:
        - $ref: '#/components/parameters/userIdPath'
      requestBody:
        description: User object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePassword'
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: User not found
          content: {}
        '405':
          description: Validation exception
          content: {}
      x-codegen-request-body-name: body

    post:
      tags:
        - password
      summary: Fogout Password
      operationId: forgetPassword
      requestBody:
        description: create a new password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgetPassword'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body

  /sessions:
    get:
      tags:
        - session
      summary: Get session state
      operationId: statusSession
      parameters:
        - $ref: '#/components/parameters/sessionId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusUser'

        '400':
          description: Invalid ID
        '404':
          description: Session not found
          content: {}
    post:
      tags:
        - session
      summary: Logs User into the system
      operationId: login
      parameters:
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/password'
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginOk'
        '400':
          description: Invalid username/password supplied
          content: {}
    delete:
      tags:
        - session
      summary: Logout current logged in User session
      operationId: logout
      parameters:
        - $ref: '#/components/parameters/sessionId'
      responses:
        default:
          description: successful operation
          content: {}



  '/users/{userId}/tasks':
    get:
      tags:
        - user
      summary: Get all Task by ID User
      description: Returns all single Task
      operationId: getTaskByIdUser
      parameters:
        - $ref: '#/components/parameters/userIdPath'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTasks'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Task not found
          content: {}


  /notifications:
    post:
      tags:
        - notification
      summary: Create a new Task for User
      operationId: createTask
      requestBody:
        description: Task object that fdefinition for user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body


    delete:
      tags:
        - notification
      summary: Deletes a Task
      operationId: deleteTask
      parameters:
        - name: taskId
          in: query
          description: Task id to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Task not found
          content: {}
    put:
      tags:
        - notification
      summary: Update an existing Task
      operationId: updateTask
      parameters:
        - $ref: '#/components/parameters/taskIdQuery'
      requestBody:
        description: Task object that fdefinition for user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateTask'
        required: true
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Task not found
          content: {}
        '405':
          description: Validation exception
          content: {}
      x-codegen-request-body-name: body
    get:
      tags:
        - notification
      summary: Get all Tasks
      description: Returns List a Tasks
      operationId: getAllTask
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTasks'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Task not found
          content: {}

  '/tasks/{taskId}':
    get:
      tags:
        - notification
      summary: Get Task by ID
      description: Returns a single Task
      operationId: getTaskById
      parameters:
        - $ref: '#/components/parameters/taskIdPath'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Task not found
          content: {}



  '/users/{userId}/devices':
    get:
      tags:
        - user
      summary: Get all devices by ID User
      description: Returns array Device
      operationId: getAllDeviceByIdUser
      parameters:
        - $ref: '#/components/parameters/userIdPath'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDeviceList'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Device not found
          content: {}


  /devices:
    post:
      tags:
        - device
      summary: create a new Device
      operationId: createDevice
      requestBody:
        description: Device object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
    put:
      tags:
        - device
      summary: Update an existing Device
      operationId: updateDevice
      parameters:
        - $ref: '#/components/parameters/deviceIdQuery'
      requestBody:
        description: Device object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDevice'
        required: true
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Device not found
          content: {}
        '405':
          description: Validation exception
          content: {}

      x-codegen-request-body-name: body
    get:
      tags:
        - device
      summary: Get all Devices
      description: Returns all Device
      operationId: getAllDevice
      parameters:
        - $ref: '#/components/parameters/userIdPath'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDeviceList'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Device not found
          content: {}
    delete:
      tags:
        - device
      summary: Delete a Device
      operationId: deleteDevice
      parameters:
        - $ref: '#/components/parameters/deviceIdQuery'
      responses:
        default:
          description: successful operation
          content: {}
  '/devices/{deviceId}':
    get:
      tags:
        - device
      summary: Get Device by ID
      description: Returns a single Device
      operationId: getDeviceById
      parameters:
        - $ref: '#/components/parameters/deviceIdPath'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindDevice'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Device not found
          content: {}


  '/comapanies/{companyId}/devices':
    get:
      tags:
        - company
      summary: Get all devices by ID
      description: Returns array Device
      operationId: getAllDeviceByIdCompany
      parameters:
        - $ref: '#/components/parameters/companyIdPath'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDeviceList'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Device not found
          content: {}

  '/comapanies/{companyId}/users':
    get:
      tags:
        - company
      summary: Get all users of a company
      description: Get all users of a company
      operationId: getAllUserByIdCompany
      parameters:
        - $ref: '#/components/parameters/companyIdPath'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUser'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Device not found
          content: {}

  '/comapanies/{companyId}/details-devices':
    get:
      tags:
        - company
      summary:  Get Device specific information
      description: Get AVG temperature by ID Entities
      operationId: getAvgTemperatureByIdEntity
      parameters:
        - $ref: '#/components/parameters/companyIdPath'
        - $ref: '#/components/parameters/detailDevice'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Device not found
          content: {}

  '/comapanies/{companyId}/avg-devices':
    get:
      tags:
        - company
      summary:  Get AVG Device
      description: Get AVG temperature by ID Entities
      operationId: getAvgDevice
      parameters:
        - $ref: '#/components/parameters/companyIdPath'
        - $ref: '#/components/parameters/avg'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Device not found
          content: {}

  '/comapanies/{companyId}/sum-devices':
    get:
      tags:
        - company
      summary:  Get SUM Device
      description: Get AVG temperature by ID Entities
      operationId: getSumDevice
      parameters:
        - $ref: '#/components/parameters/companyIdPath'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Device not found
          content: {}

  '/comapanies/{companyId}/sort-devices':
    get:
      tags:
        - company
      summary:  Get AVG Device
      description: Get SORT temperature by ID Entities
      operationId: getSortDevice
      parameters:
        - $ref: '#/components/parameters/companyIdPath'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortBy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDeviceList'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Device not found
          content: {}

  '/comapanies/{companyId}/filterColumName-devices':
    get:
      tags:
        - company
      summary:  Filter by any column on the Device
      description: Get SORT temperature by ID Entities
      operationId: getFilterColumNameDevice
      parameters:
        - $ref: '#/components/parameters/companyIdPath'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDeviceList'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Device not found
          content: {}

  '/comapanies/{companyId}/filterDate-devices':
    get:
      tags:
        - company
      summary:  Filter by any date on the Device
      description: Get SORT temperature by ID Entities
      operationId: getFilterDateDevice
      parameters:
        - $ref: '#/components/parameters/companyIdPath'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/dateTo'
        - $ref: '#/components/parameters/dateFrom'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Device not found
          content: {}
  '/comapanies/{companyId}/filter-devices':
    get:
      tags:
        - company
      summary: Filter a user's devices by ID
      description: find a user's device input value
      operationId: filterDevicesByIdEntity
      parameters:
        - $ref: '#/components/parameters/companyIdPath'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/dateTo'
        - $ref: '#/components/parameters/dateFrom'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDeviceList'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Device not found
          content: {}



  '/comapanies/{companyId}/incidence-devices':
    get:
      tags:
        - company
      summary: Get all incidence device by ID
      description: Order ASC device
      operationId: getDevicesIncidenceByIdEntity
      parameters:
        - $ref: '#/components/parameters/companyIdPath'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/filter'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIncidence'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Device not found
          content: {}

  '/comapanies/{companyId}/exportFile-devices':
    get:
      tags:
        - company
      summary: Export data in to file
      description: Export file
      operationId: exportFileByIdEntity
      parameters:
        - $ref: '#/components/parameters/companyIdPath'
        - $ref: '#/components/parameters/formatFile'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/dateTo'
        - $ref: '#/components/parameters/dateFrom'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIncidence'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Device not found
          content: {}



  '/entities/{entityId}/filter-date-devices':
    get:
      tags:
        - incidence
      summary: Filter data by date
      description: ''
      operationId: filterDevicesDateByIdEntity
      parameters:
        - name: entityId
          in: path
          description: entityes ID
          required: true
          schema:
            type: string
            format: uuid
        - name: entityName
          in: query
          description: ''
          required: true
          schema:
            type: string
            example: User / Company
        - name: to
          in: query
          description: ''
          required: true
          schema:
            type: string
            format: date
            example: "2021-01-23"

        - name: from
          in: query
          description: ''
          required: true
          schema:
            type: string
            format: date
            example: "2021-02-23"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindDevice'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Device not found
          content: {}


  /events:
    get:
      tags:
        - event
      summary: Get all alerts
      description: Returns a mesage for User
      operationId: getAllAlert
      parameters:
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int64
            example: "20"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertList'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Device not found
          content: {}


  '/events/{alertId}':
    get:
      tags:
        - event
      summary: Get all Alert by ID Alert
      description: Returns all  Alert Alert
      operationId: getAlertById
      parameters:
        - name: alertId
          in: path
          description: ID of User to return
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int64
            example: "20"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: ID not found
          content: {}

  '/entities/{entityId}/alerts':
    get:
      tags:
        - event
      summary: Get all Alert by ID Entities
      description: Returns all  Alert Entities
      operationId: getAlertByIdEntities
      parameters:
        - name: entityId
          in: path
          description: ID of User to return
          required: true
          schema:
            type: string
        - name: entityName
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int64
            example: "20"

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertList'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: ID not found
          content: {}



components:
  parameters:

    companyIdQuery:
      in: query
      name: companyId
      required: true
      schema:
        type: string
        format: uuid

    userIdQuery:
      in: query
      name: userId
      required: true
      schema:
        type: string
        format: uuid

    companyIdPath:
      in: path
      name: companyId
      required: true
      schema:
        type: string
        format: uuid

    userIdPath:
      in: path
      name: userId
      required: true
      schema:
        type: string
        format: uuid

    taskIdPath:
      in: path
      name: taskId
      required: true
      schema:
        type: string
        format: uuid

    taskIdQuery:
      in: query
      name: taskId
      required: true
      schema:
        type: string
        format: uuid

    deviceIdPath:
      in: path
      name: deviceId
      required: true
      schema:
        type: string
        format: uuid

    deviceIdQuery:
      in: query
      name: deviceId
      required: true
      schema:
        type: string
        format: uuid

    filterB:
      in: header
      name: filterValue
      required: true
      schema:
        $ref: '#/components/schemas/Filter'


    offset:
      in: query
      name: offset
      description: value offSet to search
      required: false
      schema:
        type: integer
        format: int64
        default: 0

    limit:
      in: query
      name: limit
      description: value offSet to search
      required: false
      schema:
        type: integer
        format: int64
        default: 50

    sortBy:
      in: query
      name: sortBy
      description: ''
      required: false
      schema:
        type: string
        enum:
          - ASC
          - DESC
        default: ASC

    avg:
      in: query
      name: avg
      description: Get AVG Devices
      required: false
      schema:
        type: string
        enum:
          - Temperature
          - Humidity
        default: Temperature

    columnName:
      in: query
      name: columnName
      description: ''
      required: false
      schema:
        type: string
        enum:
          - column1
          - column2
        default: column1

    sessionId:
      in: query
      name: sessionId
      description: The ID for session
      required: true
      schema:
        type: string
        format: uuid

    email:
      in: query
      name: email
      description: The user email for login
      required: true
      schema:
        type: string
        format: uuid

    password:
      in: query
      name: password
      description: The password for login
      required: true
      schema:
        type: string
        format: password



    filter:
      in: header
      name: filter
      description:  Add values to filter in your search
      required: false
      schema:
        type: array
        additionalProperties: true
        items:
          $ref: '#/components/schemas/FilterColumnCompany'

    detailDevice:
      in: query
      name: detailsDevice
      description: 'Device specific information'
      required: true
      schema:
        type: string
        enum:
          - Select option
          - AVG Temperature
          - AVG Humidit
          - SUM Device
          - Batery Level
        default: Select option

    formatFile:
      in: query
      name: formatFile
      description: 'Donwload file data'
      required: true
      schema:
        type: string
        enum:
          - PDF
          - XSLX
          - TXT
          - JSON
          - XML
        default: XSLX

    dateTo:
      in: query
      name: dateTo
      description: 'Begin date to filter'
      required: false
      schema:
        type: string
        format: date

    dateFrom:
      in: query
      name: dateFrom
      description: 'Final date to filter filter'
      required: false
      schema:
        type: string
        format: date


  requestBodies:
    FilterDeviceBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              items:
                $ref: '#/components/schemas/FilterDevice'

    FilterDateDeviceBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FilterDateDevice'

  schemas:
    entityId:
      type: string
      format: uuid

    entityName:
      type: string


    CreateCompany:
      required:
        - address
        - codePostal
        - companyName
        - email
        - nif
        - phone
        - web
      type: object
      additionalProperties: false
      properties:
        companyName:
          type: string
        nif:
          type: string
        address:
          type: string
        codePostal:
          type: string
        phone:
          type: string
        email:
          type: string
          format: email
        web:
          type: string

    Company:
      required:
        - address
        - codePostal
        - companyId
        - companyName
        - email
        - nif
        - phone
        - web
      type: object
      additionalProperties: false
      properties:
        companyId:
          type: string
          format: uuid
        companyName:
          type: string
        nif:
          type: string
        address:
          type: string
        codePostal:
          type: string
        phone:
          type: string
        email:
          type: string
          format: email
        web:
          type: string

    UpdateCompany:
      required:
        - address
        - codePostal
        - companyName
        - nif
        - phone
        - web
      type: object
      additionalProperties: false
      properties:
        companyName:
          type: string
        nif:
          type: string
        address:
          type: string
        codePostal:
          type: string
        phone:
          type: string
        web:
          type: string

    CompanyList:
      type: object
      additionalProperties: false
      properties:
        size:
          type: integer
          format: int64
        items:
          type: array
          items:
            $ref: '#/components/schemas/Company'

    Role:
      required:
        - roleId
        - roleName
        - description
      type: object
      additionalProperties: false
      properties:
        roleId:
          type: string
          format: uuid
        roleName:
          type: string
        description:
          type: string

    CreateUser:
      required:
        - companyName
        - email
        - name
        - nicknames
        - password
        - role
      type: object
      additionalProperties: false
      properties:
        role:
          type: string
        companyName:
          type: string
        name:
          type: string
        nicknames:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
    User:
      required:
        - companyId
        - email
        - name
        - nicknames
        - createdAt
        - role
        - userId
        - totalDevice
      type: object
      additionalProperties: false
      properties:
        userId:
          type: string
          format: uuid
        companyId:
          type: string
          format: uuid
        role:
          $ref: '#/components/schemas/Role'
        name:
          type: string
        nicknames:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
        totalDevice:
          type: integer
          format: int64


    ListUser:
      required:
        - companyName
        - email
        - name
        - nicknames
        - role
        - totalDevice
      type: object
      additionalProperties: false
      properties:

        companyName:
          type: string
        role:
          $ref: '#/components/schemas/Role'
        name:
          type: string
        nicknames:
          type: string
        email:
          type: string
        totalDevice:
          type: integer
          format: int64

    UpdateUser:
      required:
        - name
        - nicknames
        - role
      type: object
      additionalProperties: false
      properties:
        role:
          type: string
        name:
          type: string
        nicknames:
          type: string

    AllUser:
      type: object
      required:
        - items
        - size
      additionalProperties: false
      properties:
        size:
          type: integer
          format: int64
        items:
          type: array
          items:
            $ref: '#/components/schemas/User'

    LoginOk:
      required:
        - companyId
        - email
        - name
        - nicknames
        - role
        - roleId
        - userId
        - status
      type: object
      additionalProperties: false
      properties:
        userId:
          type: string
          format: uuid
        companyId:
          type: string
          format: uuid
        roleId:
          type: string
          format: uuid
        role:
          type: string
        name:
          type: string
        nicknames:
          type: string
        email:
          type: string
          format: email
        status:
          type: boolean
    UpdatePassword:
      type: object
      required:
        - newPassword

      additionalProperties: false
      properties:
        newPassword:
          type: string

    ForgetPassword:
      type: object
      required:
        - email
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
    StatusUser:
      type: object
      additionalProperties: false
      required:
        - status
        - code
        - userId
      properties:
        userId:
          type: string
          format: uuid
        status:
          type: string
        code:
          type: integer
          format: int64

    Device:
      required:
        - companyId
        - deviceName
        - userId
      type: object
      additionalProperties: false
      properties:

        userId:
          type: string
          format: uuid
        companyId:
          type: string
          format: uuid
        deviceName:
          type: string
          example: ffffff100000c845

    UpdateDevice:
      required:
        - companyId
        - deviceName
        - userId
      type: object
      additionalProperties: false
      properties:
        userId:
          type: string
          format: uuid
        companyId:
          type: string
          format: uuid
        deviceName:
          type: string
          example: ffffff100000c845

    FindDevice:
      required:
        - companyName
        - userName
        - role
        - deviceName
        - humidity
        - temperature
        - batery
        - status
      type: object
      additionalProperties: false
      properties:
        companyName:
          type: string
        deviceName:
          type: string
          example: ffffff100000c845
        userName:
          type: string
        role:
          $ref: '#/components/schemas/Role'

        temperature:
          type: number
          example: 26.3
        humidity:
          type: number
          example: 26.3
        batery:
          type: integer
          format: int64
          example: 58
        status:
          type: string
          example: on

    Operation:
      type: object
      required:
        - operationName
        - description
        - entityName
        - value
      additionalProperties: false
      properties:
        operationName:
          type: string
          example: Name operation
        description:
          type: string
          example: Description about this function
        value:
          type: integer
          format: int64
          example: 22


    CompanyDeviceList:
      type: object
      required:
        - items
        - size
      additionalProperties: false
      properties:

        size:
          type: integer
          format: int64
        items:
          type: array
          items:
            $ref: '#/components/schemas/FindDevice'

    Task:
      required:
        - userName
        - deviceName
        - type
        - email
        - taskName
        - condition
        - conditionalValue

      type: object
      additionalProperties: false
      properties:
        userName:
          type: string
        deviceName:
          type: string
          example: ffffff100000c845
        type:
          type: string
          example: temperature
        email:
          type: string
          format: email
        taskName:
          type: string
          example: high temperature level
        condition:
          type: string
          example: ">="
        conditionalValue:
          type: number
          format: float
          example: 22.5

    updateTask:
      required:
        - taskName
        - condition
        - valueConditional
      type: object
      additionalProperties: false
      properties:
        taskName:
          type: string
          example: high temperature level
        condition:
          type: string
          example: ">="
        valueConditional:
          type: number
          format: float
          example: 25.5

    ListTasks:
      required:
        - items
        - size
      type: object
      additionalProperties: false
      properties:
        size:
          type: integer
          format: int64
        items:
          type: array
          items:
            $ref: '#/components/schemas/Task'

    Alert:
      type: object
      additionalProperties: false
      required:
        - userName
        - deviceName
        - alertName
        - recivedAt
        - hour
        - condition
        - conditionalValuer
        - currentValue
      properties:
        userName:
          type: string
          example: User
        deviceName:
          type: string
          example: ffffff100000c845
        alertName:
          type: string
          example: High temperature
        recivedAt:
          type: string
          format: date
        hour:
          type: string
          format: time
          example: '20:30'
        condition:
          type: string
          example: '=>'
        conditionalValuer:
          type: number
          example: 35
        currentValue:
          type: integer
          format: int64


    FilterDevice:
      type: object
      additionalProperties: false
      required:
        - entityId
        - entityName
        - columnName
        - value
      properties:
        entityId:
          type: string
          format: uuid
        entityName:
          type: string
        columnName:
          type: string
        value:
          type: string

    FilterDateDevice:
      type: object
      additionalProperties: false
      required:
        - entityId
        - entityName
        - to
        - from
      properties:
        entityId:
          type: string
          format: uuid
        entityName:
          type: string
        to:
          type: string
          format: date
        from:
          type: string
          format: date

    Filter:
      type: object
      additionalProperties: false
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/FilterDevice'

    FilterColumnCompany:
      type: object
      required:
        - columnName
      additionalProperties: false
      properties:
        nameColumn:
          type: string
          enum:
            - Hola
            - Hola2
          default: Hola

    Incidence:
      type: object
      additionalProperties: false
      required:
        - deviceId
        - userId
        - companyId
        - deviceName
        - incidenceName
        - date
        - recivedAt
        - valuecConditional
        - value
        - timeDuration
      properties:
        deviceId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        companyId:
          type: string
          format: uuid
        incidenceName:
          type: string
          example: High temperature
        deviceName:
          type: string
          example: ffffff100000c845
        date:
          type: string
          format: date
        recivedAt:
          type: string
          format: time
          example: 00:30
        valuecConditional:
          type: string
          example: ">50"
        value:
          type: string
        timeDuration:
          type: string
          format: time
          example: 02:30

    ListIncidence:
      type: object
      required:
        - incidence
        - size
      additionalProperties: false
      properties:
        size:
          type: integer
          format: int64
        incidence:
          type: array
          additionalProperties: false
          items:
            $ref: '#/components/schemas/Incidence'

    AlertList:
      type: object
      required:
        - items
        - size
      additionalProperties: false
      properties:
        size:
          type: integer
          format: int64
        items:
          $ref: '#/components/schemas/Alert'


